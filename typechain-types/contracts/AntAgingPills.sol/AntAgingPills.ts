/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AntAgingPillsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createAntAging"
      | "feeToken"
      | "getReleasedTokens"
      | "getblckTime"
      | "initialize"
      | "lockInfoById"
      | "nftAddress"
      | "owner"
      | "renounceOwnership"
      | "setTokenURL"
      | "transferOwnership"
      | "withdrawReleasedTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "lockAntAgingCreated"
      | "lockAntAgingWithdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createAntAging",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReleasedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getblckTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURL",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReleasedTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAntAging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReleasedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getblckTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReleasedTokens",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace lockAntAgingCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    to: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    exponent: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    to: string,
    startTime: bigint,
    endTime: bigint,
    exponent: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    to: string;
    startTime: bigint;
    endTime: bigint;
    exponent: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace lockAntAgingWithdrawalEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    withdrawnAmount: BigNumberish,
    releasedTokens: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    user: string,
    withdrawnAmount: bigint,
    releasedTokens: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    withdrawnAmount: bigint;
    releasedTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AntAgingPills extends BaseContract {
  connect(runner?: ContractRunner | null): AntAgingPills;
  waitForDeployment(): Promise<this>;

  interface: AntAgingPillsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAntAging: TypedContractMethod<
    [
      to: AddressLike,
      tokenAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      exponent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeToken: TypedContractMethod<[], [string], "view">;

  getReleasedTokens: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getblckTime: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [nftAddress_: AddressLike, feeToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  lockInfoById: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        lockedAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        exponent: bigint;
        withdrawnAmount: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  nftAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTokenURL: TypedContractMethod<
    [prefix: string, suffix: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawReleasedTokens: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAntAging"
  ): TypedContractMethod<
    [
      to: AddressLike,
      tokenAmount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      exponent: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReleasedTokens"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getblckTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [nftAddress_: AddressLike, feeToken_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockInfoById"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        lockedAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        exponent: bigint;
        withdrawnAmount: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenURL"
  ): TypedContractMethod<
    [prefix: string, suffix: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawReleasedTokens"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "lockAntAgingCreated"
  ): TypedContractEvent<
    lockAntAgingCreatedEvent.InputTuple,
    lockAntAgingCreatedEvent.OutputTuple,
    lockAntAgingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "lockAntAgingWithdrawal"
  ): TypedContractEvent<
    lockAntAgingWithdrawalEvent.InputTuple,
    lockAntAgingWithdrawalEvent.OutputTuple,
    lockAntAgingWithdrawalEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "lockAntAgingCreated(uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      lockAntAgingCreatedEvent.InputTuple,
      lockAntAgingCreatedEvent.OutputTuple,
      lockAntAgingCreatedEvent.OutputObject
    >;
    lockAntAgingCreated: TypedContractEvent<
      lockAntAgingCreatedEvent.InputTuple,
      lockAntAgingCreatedEvent.OutputTuple,
      lockAntAgingCreatedEvent.OutputObject
    >;

    "lockAntAgingWithdrawal(uint256,address,uint256,uint256)": TypedContractEvent<
      lockAntAgingWithdrawalEvent.InputTuple,
      lockAntAgingWithdrawalEvent.OutputTuple,
      lockAntAgingWithdrawalEvent.OutputObject
    >;
    lockAntAgingWithdrawal: TypedContractEvent<
      lockAntAgingWithdrawalEvent.InputTuple,
      lockAntAgingWithdrawalEvent.OutputTuple,
      lockAntAgingWithdrawalEvent.OutputObject
    >;
  };
}
